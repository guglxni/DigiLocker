name: Docker Build & Push

on:
  push:
    branches: [main, develop]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      push_image:
        description: 'Push image to registry'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/digilocker

jobs:
  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
      actions: read
      id-token: write
      security-events: write
      
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        flavor: |
          latest=auto
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=sha,prefix=${{ github.ref_name }}-
        labels: |
          org.opencontainers.image.title=DigiLocker
          org.opencontainers.image.description=DigiLocker integration demo with APISetu
          org.opencontainers.image.vendor=${{ github.repository_owner }}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64  # Single platform for speed
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker
    timeout-minutes: 10
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      security-events: write
      packages: read
      
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deployment-ready:
    name: Mark as Deployment Ready
    runs-on: ubuntu-latest
    needs: [docker, security]
    timeout-minutes: 5
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:        
    - name: Comment on commit
      uses: actions/github-script@v7
      with:
        script: |
          const image = "${{ needs.docker.outputs.image }}".split('\n')[0];
          const digest = "${{ needs.docker.outputs.digest }}";
          
          const body = `üê≥ **Docker Image Ready for Deployment**

          **Image**: \`\${image}\`
          **Digest**: \`\${digest}\`

          ### Quick Deploy:
          \\\`\\\`\\\`bash
          docker pull \${image}
          docker run -p 3007:3007 -e NODE_ENV=production \${image}
          \\\`\\\`\\\`

          ### Available on:
          - üñ•Ô∏è AMD64 (Intel/AMD servers)
          
          ‚úÖ Security scanned and ready for production deployment!`;
          
          await github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: body
          }); 